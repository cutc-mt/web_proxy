Proxy経由Webアクセスアプリ 要求仕様
概要

本アプリケーションは、指定されたプロキシサーバーを経由してWebリクエストを送信し、その結果をデータベースに保存・管理するツールです。

機能

1. 設定
プロキシ設定: ユーザーは、Webアクセスに使用するプロキシサーバーのURL（例: http://proxy.example.com:8080）を設定できる。

URL設定: リクエストを送信する先のURLを設定できる。

2. リクエスト入力
POSTデータ入力: 以下の情報を入力し、POSTデータとして送信できる。

question (必須): 質問内容

approach (必須): アプローチ方法（rtr のみ固定）

overrides (任意): 以下の要素を子要素に持ち、それぞれの設定をオーバーライドできる。

retrieval_mode: 検索モード（hybrid, vectors, text から選択）

semantic_ranker: セマンティックランカーを使用するかどうか (チェックボックス)

semantic_captions: セマンティックキャプションを使用するかどうか (チェックボックス)

top: 上位何件の結果を取得するか (1-50 の整数)

temperature: ランダム性の度合い (0.0-1.0 の浮動小数点数)

prompt_template: プロンプトテンプレート

exclude_category: 除外するカテゴリ

POSTデータ保存: 現在入力されているPOSTデータを、名前を付けて保存できる。

保存されたPOSTデータは、後から選択してロードできる。

リクエスト送信: 設定されたURLとプロキシ、および入力されたPOSTデータを使用してWebリクエストを送信し、レスポンスを表示する。

プロキシが設定されていない場合は、プロキシを経由せずにリクエストを送信する。

3. レスポンス表示
ステータスコード: Webリクエストのステータスコードを表示する。

ヘッダー: レスポンスヘッダーを表示する。

ボディ: レスポンスボディを表示する。

JSON形式の場合は、JSONとして整形して表示する。

JSON形式でない場合は、プレーンテキストとして表示する。

JSON形式で、errorキーが存在する場合、エラー内容を表示する。

JSON形式で、errorキーが存在しない場合, "answer", "thoughts", "data_points"を表示する

4. リクエスト管理
リクエスト一覧: 過去に送信されたリクエストを一覧表示する。

各リクエストについて、以下の情報を表示する。

リクエスト日時

URL

ステータスコード

POSTデータの先頭50文字

エラー (存在する場合)

メモ
*　リクエスト名
*　レスポンスヘッダー

レスポンスボディの各要素（ answer, thoughts, data_points, error）

カラム選択: どのカラムを表示するか選択できる。
*　リクエスト名でのフィルタ:　リクエスト名で一覧をフィルタできる

メモ: 各リクエストにメモを追加し、保存できる。

CSVエクスポート: リクエスト一覧をCSVファイルとしてエクスポートする。

リクエスト削除: 各リクエストを選択して削除できる。

5. データ管理
POSTデータ保存: 入力されたPOSTデータを名前を付けて保存する。

同じ名前のPOSTデータは保存できない（名前はユニークである必要がある）。

POSTデータロード: 保存されたPOSTデータをロードし、入力フィールドに反映する。

POSTデータのエクスポート/インポート POSTデータをJSONファイルとしてエクスポート/インポートする

POSTデータ削除: 保存されたPOSTデータを削除する。

6. データベース
設定、リクエスト、POSTデータを SQLite データベース (config.db) に保存する。

7. UI
Streamlit を使用して、WebベースのUIを提供する。

ワイドモードで表示する。

サイドバーに設定オプションとページ選択メニューを表示する。

8. エラー処理
Webリクエストの送信、データベース操作、JSONのパースなど、各種処理で発生する可能性のあるエラーを適切に処理し、ユーザーに分かりやすいメッセージを表示する。

9. セキュリティ
入力されたプロキシURLの形式を検証し、有効なURLであることを確認する。

データベースへのアクセスは、適切な権限管理のもとで行う。

10. その他
approach フィールドはUIに表示せず、常に rtr としてPOSTデータに含める。

リクエストに名前を付けない場合、デフォルトの名前（リクエスト日時＋連番）を自動的に付与する。

ファイル構成

web_proxy/
├── main.py          # メインのエントリーポイント
├── pages/           # 各ページごとのソースコード
│   ├── __init__.py
│   ├── home.py      # ホームページのソースコード
│   └── request_management.py  # リクエスト管理ページのソースコード
├── utils/           # 共通の関数やクラス
│   ├── db_utils.py  # データベース関連のユーティリティ関数
│   └── api_utils.py # API関連のユーティリティ関数
└── ...
Use code with caution.
各ファイルの役割

main.py:

Streamlitアプリケーションのエントリーポイントとなるファイルです。

st.set_page_config() をはじめとする Streamlit アプリケーションの設定を行います。

データベースの初期化 (init_db()) を行います。

セッション状態の初期化 (initialize_session_state()) を行います。

サイドバーにページ選択メニューを表示し、選択されたページに応じて、対応する関数を呼び出します。

pages/__init__.py:

pages ディレクトリを Python パッケージとして認識させるための空のファイルです。

pages/home.py:

リクエスト入力画面 (ホームページ) のUIを定義します。

POSTデータの入力フォーム、POSTデータの保存・ロード機能、リクエスト送信ボタンなどを配置します。

pages/request_management.py:

リクエスト管理画面のUIを定義します。

リクエスト一覧の表示、カラム選択、リクエスト名でのフィルタリング、CSVエクスポート、リクエスト削除機能などを配置します。

utils/db_utils.py:

データベース関連のユーティリティ関数を定義します。

データベース接続の確立 (get_db_connection())

データベースの初期化 (init_db())

設定のロードと保存 (load_settings(), save_settings())

POSTデータの保存、ロード、削除 (save_post_data(), load_post_data(), delete_post_data())

リクエストの保存、ロード、削除 (save_request(), load_requests_summary(), delete_request())

セッション状態の初期化 (initialize_session_state())

utils/api_utils.py:

API関連のユーティリティ関数を定義します。

プロキシURLの検証 (is_valid_proxy_url())

JSONデータの作成 (create_json_data())

レスポンスデータの表示 (display_response())